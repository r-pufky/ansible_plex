---
# yamllint disable rule:line-length
###############################################################################
# Prep Plex
###############################################################################
# Plex install from deb packages are categorically broken. There are no debconf
# options.
#
# /etc/default/plexmediaserver no longer honored on installation. Explicitly
# set systemd override.conf before service exists. The installation script
# checks for the existence of this and uses those values while installing.
#
# Plex installation will create a 'plex' user regardless of what the service is
# configured to run as.
#
# See preinst and /usr/lib/plexmediaserver/lib/plexmediaserver.default in deb
# package.
#
# Prepare system for pre-configured package install.
#
# Generates:
#   _plex_library_dir: str - plex media location.
#   _plex_config: dict - user plex preference options to render (XML).

- name: 'Prep | calculate variables'
  ansible.builtin.set_fact:
    _plex_library_dir: '{{ plex_service_application_support_dir }}/Plex Media Server'
    _plex_config: '{{ {} }}'
    _plex_preroll_join: '{{ "," if plex_cinema_trailers_preroll_play_all else ";" }}'

- name: 'Prep | manage users'
  when: plex_create_user
  ansible.builtin.include_role:
    name: 'r_pufky.srv.users'
    tasks_from: 'role_account_add.yml'
  vars:
    users_role_group: '{{ plex_role_group }}'
    users_role_user: '{{ plex_role_user }}'

- name: 'Prep | set {{ plex_service_application_support_dir }}'
  ansible.builtin.file:
    path: '{{ plex_service_application_support_dir }}'
    owner: '{{ plex_user }}'
    group: '{{ plex_group }}'
    mode: '0755'
    recurse: true
    state: 'directory'

- name: 'Prep | create in-memory /tmp for transcoding'
  when: plex_service_transcode_memory | length > 0
  ansible.builtin.include_role:
    name: 'r_pufky.srv.debian'
    tasks_from: 'tmp.yml'
  vars:
    debian_role_tmpfs: '{{ plex_transcoder_temp_directory | default("/tmp") }}'
    debian_tmp_ram: '{{ plex_service_transcode_memory }}'

# Plex service potentially not installed yet, do not reload.
- name: 'Install | set plex service defaults override.conf'
  ansible.builtin.include_role:
    name: 'r_pufky.srv.systemd'
  vars:
    systemd_daemon_reload_enable: false
    systemd_services:
      - name: 'plexmediaserver'
        state: 'present'
        override: true
        service: {}
        exec:
          environment:
            - var: 'TMPDIR'
              value: '{{ plex_transcoder_temp_directory | default("/tmp") }}'
            - var: 'PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR'
              value: '{{ plex_service_application_support_dir | default("/var/lib/plexmediaserver/Library/Application Support") }}'
            - var: 'PLEX_MEDIA_SERVER_MAX_PLUGIN_PROCS'
              value: '{{ plex_service_max_plugin_processes | default(6) }}'
            - var: 'PLEX_MEDIA_SERVER_MAX_STACK_SIZE'
              value: '{{ plex_service_max_stack_size | default(3000) }}'
            - var: 'PLEX_MEDIA_SERVER_USER'
              value: '{{ plex_user }}'
            - var: 'PLEX_USER'
              value: '{{ plex_user }}'
            - var: 'PLEX_MEDIA_SERVER_USE_SYSLOG'
              value: '{{ plex_service_use_syslog_enable | string | lower }}'
          user: '{{ plex_user }}'
          group: '{{ plex_group }}'

- name: 'Config | query plex DB size'
  ansible.builtin.stat:
    path: '{{ _plex_library_dir }}/{{ plex_role_db_dir }}'
  register: _plex_db

- name: 'Config | set auto grow DB cache size'
  when: plex_service_auto_grow_db_cache_size_enable
  ansible.builtin.set_fact:
    plex_database_cache_size: '{{ plex_database_cache_size if (not _plex_db.stat.exists or _plex_db.stat.size * 1048576 < plex_database_cache_size) else (plex_database_cache_size * 1.1) | int }}'

# Plex does not consistently apply casing to XML settings are are frequently
# mis-spelled or inconsistently spelled; so we have to explicitly map those
# settings to the equivalent role settings. Overlay these with values read from
# Preferences.xml if auto-generated values are kept; as well as any stateful
# options. Order does not matter (Plex initially only stores non-default values
# until it is set once, then the setting is always stored, last changed setting
# last).
- name: 'Prep | build base user preference mapping'
  ansible.builtin.set_fact:
    _plex_config: {
      # Settings > General
      FriendlyName: '{{ plex_friendly_name | default("") }}',
      sendCrashReports: '{{ plex_send_crash_reports | default(false) | bool | int }}',
      PushNotificationsEnabled: '{{ plex_push_notifications_enabled | default(false) | bool | int }}',
      logDebug: '{{ plex_log_debug | default(false) | bool | int }}',
      LogVerbose: '{{ plex_log_verbose | default(false) | bool | int }}',
      ButlerUpdateChannel: '{{ plex_butler_update_channel | default(0) }}',
      # Settings > Remote Access
      PublishServerOnPlexOnlineKey: '{{ plex_publish_server_on_plex_online_key | default(false) | bool | int }}',
      ManualPortMappingMode: '{{ plex_manual_port_mapping_mode | default(false) | bool | int }}',
      ManualPortMappingPort: '{{ plex_manual_port_mapping_port | default(32400) }}',
      WanTotalMaxUploadRate: '{{ plex_wan_total_max_upload_rate | default(0) }}',
      WanPerStreamMaxUploadRate: '{{ plex_wan_per_stream_max_upload_rate | default(0) }}',
      # Settings > Agents (Legacy) (no settings)
      # Settings > Library
      FSEventLibraryUpdatesEnabled: '{{ plex_fs_event_library_updates_enabled | default(false) | bool | int }}',
      FSEventLibraryPartialScanEnabled: '{{ plex_fs_event_library_partial_scan_enabled | default(false) | bool | int }}',
      watchMusicSections: '{{ plex_watch_music_sections | default(false) | bool | int }}',
      ScheduledLibraryUpdatesEnabled: '{{ plex_scheduled_library_updates_enabled | default(false) | bool | int }}',
      ScheduledLibraryUpdateInterval: '{{ plex_scheduled_library_update_interval | default(86400) }}',
      autoEmptyTrash: '{{ plex_auto_empty_trash | default(true) | bool | int }}',
      allowMediaDeletion: '{{ plex_allow_media_deletion | default(true) | bool | int }}',
      OnDeckWindow: '{{ plex_on_deck_window | default(16) }}',
      OnDeckLimit: '{{ plex_on_deck_limit | default(40) }}',
      OnDeckIncludePremieres: '{{ plex_on_deck_include_premieres | default(true) | bool | int }}',
      LibraryVideoPlayedThreshold: '{{ plex_library_video_played_threshold | default(95) }}',
      LibraryVideoPlayedAtBehaviour: '{{ plex_library_video_played_at_behaviour | default(0) }}',
      SmartShuffleMusic: '{{ plex_smart_shuffle_music | default(true) | bool | int }}',
      MusicSeparateAlbumTypes: '{{ "enabled" if plex_music_separate_album_types | default(true) else "disabled" }}',  # XML bool rendered as text
      iTunesSharingEnabled: '{{ plex_itunes_sharing_enabled | default(false) | bool | int }}',
      iTunesLibraryXmlPath: '{{ plex_itunes_library_xml_path | default("") }}',
      ScannerLowPriority: '{{ plex_scanner_low_priority | default(false) }}',
      MarkerSource: '{{ plex_marker_source | default("any") }}',
      GenerateBIFBehavior: '{{ plex_generate_bif_behavior | default("never") }}',
      GenerateIntroMarkerBehavior: '{{ plex_generate_intro_marker_behavior | default("asap") }}',
      GenerateCreditsMarkerBehavior: '{{ plex_generate_credits_marker_behavior | default("asap") }}',
      GenerateAdMarkerBehavior: '{{ plex_generate_ad_marker_behavior | default("scheduled") }}',
      GenerateVADBehavior: '{{ plex_generate_vad_behavior | default("scheduled") }}',
      GenerateChapterThumbBehavior: '{{ plex_generate_chapter_thumb_behavior | default("scheduled") }}',
      LoudnessAnalysisBehavior: '{{ plex_loudness_analysis_behavior | default("scheduled") }}',
      MusicAnalysisBehavior: '{{ plex_music_analysis_behavior | default("scheduled") }}',
      LocationVisibility: '{{ plex_location_visibility | default(1) }}',
      DatabaseCacheSize: '{{ plex_database_cache_size | default(40) }}',
      # Settings > Network
      EnableIPv6: '{{ plex_enable_ipv6 | default(true) | bool | int }}',
      secureConnections: '{{ plex_secure_connections | default(false) | bool | int }}',
      customCertificatePath: '{{ plex_custom_certificate_path | default("") }}',
      customCertificateKey: '{{ plex_custom_certificate_key | default("") }}',
      customCertificateDomain: '{{ plex_custom_certificate_domain | default("") }}',
      PreferredNetworkInterface: '{{ plex_preferred_network_interface | default("") }}',
      DisableTLSv1_0: '{{ plex_disable_tlsv1_0 | default(false) | bool | int }}',
      GdmEnabled: '{{ plex_gdm_enabled | default(true) | bool | int }}',
      WanPerUserStreamCount: '{{ plex_wan_per_user_stream_count | default(0) }}',
      LanNetworksBandwidth: '{{ plex_lan_networks_bandwidth | default([]) | join(",") }}',
      MinutesAllowedPaused: '{{ plex_minutes_allowed_paused | default(0) }}',
      TreatWanIpAsLocal: '{{ plex_treat_wan_ip_as_local | default(true) | bool | int }}',
      RelayEnabled: '{{ plex_relay_enabled | default(true) | bool | int }}',
      customConnections: '{{ plex_custom_connections | default([]) | join(",") }}',
      allowedNetworks: '{{ plex_allowed_networks | default([]) | join(",") }}',
      WebHooksEnabled: '{{ plex_webhooks_enabled | default(true) | bool | int }}',
      # Settings > Transcoder
      TranscoderQuality: '{{ plex_transcoder_quality | default(0) }}',
      TranscoderTempDirectory: '{{ plex_transcoder_temp_directory | default("/tmp") }}',
      TranscoderThrottleBuffer: '{{ plex_transcoder_throttle_buffer | default(60) }}',
      TranscoderH264BackgroundPreset: '{{ plex_transcoder_h264_background_preset | default("veryfast") }}',
      TranscoderToneMapping: '{{ plex_transcoder_tone_mapping | default(true) | bool | int }}',
      TranscoderToneMappingAgorithm: '{{ plex_transcoder_tone_mapping_algorithm | default("veryfast") }}',  # XML var IS mis-spelled
      TranscoderCanOnlyRemuxVideo: '{{ plex_transcoder_can_only_remux_video | default(false) | bool | int }}',
      HardwareAcceleratedCodecs: '{{ plex_hardware_accelerated_codecs | default(true) | bool | int }}',
      HardwareAcceleratedEncoders: '{{ plex_hardware_accelerated_encoders | default(true) | bool | int }}',
      TranscoderHEVCEncoding: '{{ plex_transcoder_hevc_encoding | default(false) | bool | int }}',
      TranscoderHEVCOptimize: '{{ plex_transcoder_hevc_encoding | default(false) | bool | int }}',
      HardwareDevicePath: '{{ plex_hardware_device_path | default("") }}',  # auto-generated
      TranscodeCountLimit: '{{ plex_transcode_count_limit | default(0) }}',
      # Settings > Languages (no settings)
      # Settings > DLNA
      DlnaEnabled: '{{ plex_dlna_enabled | default(false) | bool | int }}',
      DlnaClientPreferences: '{{ plex_dlna_client_preferences | default("") }}',
      DlnaReportTimeline: '{{ plex_dlna_report_timeline | default(true) | bool | int }}',
      DlnaDefaultProtocolInfo: '{{ plex_dlna_default_protocol_info | join(",") }}',
      DlnaDeviceDiscoveryInterval: '{{ plex_dlna_device_discovery_interval | default(60) }}',
      DlnaAnnouncementLeaseTime: '{{ plex_dlna_announcement_lease_time | default(1800) }}',
      DlnaDescriptionIcons: '{{ plex_dlna_description_icons.formats | join(",") }};{{ plex_dlna_description_icons.sizes | join(",") }}',
      # Settings > Scheduled Tasks
      ButlerStartHour: '{{ plex_butler_start_hour | default(2) }}',
      ButlerEndHour: '{{ plex_butler_end_hour | default(5) }}',
      ButlerTaskBackupDatabase: '{{ plex_butler_task_backup_database | default(true) | bool | int }}',
      ButlerDatabaseBackupPath: '{{ plex_butler_database_backup_path | default("/var/lib/plex/Plex Media Server/Plug-in Support/Databases") }}',
      ButlerTaskOptimizeDatabase: '{{ plex_butler_task_optimize_database | default(true) | bool | int }}',
      ButlerTaskCleanOldBundles: '{{ plex_butler_task_clean_old_bundles | default(true) | bool | int }}',
      ButlerTaskCleanOldCacheFiles: '{{ plex_butler_task_clean_old_cache_files | default(true) | bool | int }}',
      ButlerTaskRefreshLocalMedia: '{{ plex_butler_task_refresh_local_media | default(true) | bool | int }}',
      ButlerTaskRefreshLibraries: '{{ plex_butler_task_refresh_libraries | default(false) | bool | int }}',
      ButlerTaskUpgradeMediaAnalysis: '{{ plex_butler_task_upgrade_media_analysis | default(true) | bool | int }}',
      ButlerTaskRefreshPeriodicMetadata: '{{ plex_butler_task_refresh_periodic_metadata | default(true) | bool | int }}',
      ButlerTaskDeepMediaAnalysis: '{{ plex_butler_task_deep_media_analysis | default(true) | bool | int }}',
      # Extras
      CinemaTrailersType: '{{ plex_cinema_trailers_type | default(true) | bool | int }}',
      CinemaTrailersFromLibrary: '{{ plex_cinema_trailers_from_library | default(true) | bool | int }}',
      CinemaTrailersFromTheater: '{{ plex_cinema_trailers_from_theater | default(false) | bool | int }}',
      CinemaTrailersFromBluRay: '{{ plex_cinema_trailers_from_bluray | default(false) | bool | int }}',
      CinemaTrailersIncludeEnglish: '{{ plex_cinema_trailers_include_english | default(true) | bool | int }}',
      CinemaTrailersPrerollID: '{{ plex_cinema_trailers_preroll_id | default([]) | join(_plex_preroll_join) }}',
      GlobalMusicVideoPath: '{{ plex_global_music_video_path | default("") }}',
      # Manage > Libraries
      MergedRecentlyAdded: '{{ plex_merged_recently_added | default(false) | bool | int }}',
      # Manage > Live TV & DVR
      DvrIncrementalEpgLoader: '{{ plex_dvr_incremental_epg_loader | default(false) | bool | int }}',
      # auto-generated (no WebUI)
      MachineIdentifier: '{{ plex_machine_identifier | default("") }}',
      ProcessedMachineIdentifier: '{{ plex_processed_machine_identifier | default("") }}',
      AnonymousMachineIdentifier: '{{ plex_anonymous_machine_identifier | default("") }}',
      # stateful (no WebUI)
      AcceptedEULA: '{{ plex_accepted_eula | default(true) | bool | int }}',
      CertificateUUID: '{{ plex_certificate_uuid | default("") }}',
      CertificateVersion: '{{ plex_certificate_version | default(3) }}',
      collectUsageData: '{{ plex_collect_usage_data | default(false) | bool | int }}',
      GlobalMusicVideoPathMigrated: '{{ plex_global_music_video_path_migrated | default(true) | bool | int }}',
      LanguageInCloud: '{{ plex_language_in_cloud | default(true) | bool | int }}',  # forced true from plex
      LastAutomaticMappedPort: '{{ plex_last_automatic_mapped_port | default(0) }}',
      MetricsEpoch: '{{ plex_metrics_epoch | default(true) | bool | int }}',
      OldestPreviousVersion: '{{ plex_oldest_previous_version | default("") }}',
      PubSubServer: '{{ plex_pubsub_server | default("184.105.148.115") }}',
      PubSubServerPing: '{{ plex_pubsub_server_ping | default(65) }}',
      PubSubServerRegion: '{{ plex_pubsub_server_region | default("sjc") }}',
      # Plex Service (no WebUI)
      PlexOnlineUsername: '{{ plex_online_username | default("") }}',
      PlexOnlineMail: '{{ plex_online_mail | default("") }}',
      PlexOnlineToken: '{{ plex_online_token | default("") }}',
      PlexOnlineHome: '{{ plex_online_home | default(true) | bool | int }}',
    }

- name: 'Prep | add preference extensions'
  when: plex_preference_extensions | length > 0
  ansible.builtin.set_fact:
    _plex_config: '{{ _plex_config | combine(plex_preference_extensions, recursive=true) }}'
